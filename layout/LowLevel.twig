<br/><br/>
<h1>LOW LEVEL</h1>
<h2>I - Presentation : </h2>
<br/>
L’année dernière au mois de janvier, j’ai acheté une imprimante 3d, RepRap, que j’ai monté, pris en main, et amélioré tout au long de l’année. J’ai fait beaucoup de modifications mécanique pour améliorer ses performances, et beaucoup touché au slicer pour imprimer correctement.
<br/><br/>
La seule partie dont je n’avais pas eu d’apperçu était évidement le code, Marlin, projet libre de controleur pour les reprap, stable et ultra portable, adaptable à toutes sortes d’imprimantes (cf muDelta, wtf???).
<br/><br/>
Depuis longtemps tournait dans ma tete l’idée de fabriquer une découpeuse laser. J’ai donc, en septembre dernier, commencé à esquisser la mécanique pour cette future machine.
<br/>
En parallèle, j’ai commencé à essayer de comprendre le fonctionnement de Marlin, mais ce fut … un echec cuisant, le code étant relativement compliqué (et mon niveau en C n’étant pas merveilleux à l’époque). J’ai donc entrepris de concevoir mon propre contrôleur de mouvement.
<br/><br/>
J'avais à ma disposition une Arduino Mega, munie d'une elec de controle, une borad RAMPS 1.4, utilisée dans les RepRap, permettant de controler jusqu'à cinq moteurs pas à pas en parallèle.
<br/><br/>
<img src="/layout/img/LL_ELEC_0.jpg" class="picture">
<br/><br/>
C’était il y a quatre mois.
<br/><br/>
<h2>II - Fonctionnalités : </h2>
<br/>
Aujourd’hui, mon petit programme inclut les fonctionnalités suivantes :
<br/><br/>
<h3>1 - Adaptabilité au nombre d’axes : </h3>
Il peut fonctionner sur n’importe quelle machine cartésienne (sur les machines polaires aussi théoriquement, ça sera certainement l’objet de mon projet de fin d’études), le code de mouvement pour chaque axe étant généré automatiquement à la compilation en fonction des paramètres entrés dans les fichiers de configuration.
<br/><br/>
<h3>2 - Régulations : </h3>
La position et la vitesse sont évidement régulées. L'accélération est, elle, maintenue constante.
<br/><br/>
<h3>3 - Trajectoires linéaires optimisées : </h3>
Les mouvements linéaires (trait droit entre deux points de l’espace à N dimensions, N = nombre d’axes) sont optimisés, et peuvent aller jusqu’à (pour l’instant) 400mm/s.
<br/><br/>
<h3>4 - Tracé en bas niveau  de TOUTE courbe 2D : </h3>
Le code contient une classe permettant de tracer n’importe quelle trajectoire suffisamment douce (sans changement brutal de direction) en 2D, si on en connaît l’équation. La régulation de la vitesse et de l’accélération au départ et à l’arrivée sont déjà codées. Ceci comprend les ellipses, les courbes de Bézier (toutes deux déjà implémentées), ou encode les spirales.
<br/><br/>
<h3>5 - Personnalisation du parseur : </h3>
Le comportement du parseur est lui aussi personnalisable, que ce soit sur les commandes de mouvement (G_N) , préparatoires (M_N) ou les paramètres passés en argument. Ceci permet d’adapter entièrement le code à la machine (par exemple, ajouter une ventilation à la découpeuse laser).
<br/><br/>
<h3>6 - En développement : </h3>
Régulation de la vitesse par groupes d’axes cartésiens : la machine peut n’avoir qu’un seul chariot dont la position et la vitesse sont regulées (ex : découpeuse laser, imprimante 3D), dans ce cas, la régulation en vitesse est aisée : il suffit de réguler la norme du vecteur vitesse ||(v1, v2, .., vn)|| = sqrt(v1²+v2²+...+vn²). Par contre, dans le cas ou la machine comporte plusieurs chariots (ex : le sélectionneur de composants dans une pick and place évoluée), la régulation par cette méthode est inexacte, car les vitesses des différents chariots sont calculées avec des parties du vecteur vitesse global. Il faut donc définir des groupes d’axes cartésiens, chacun pouvant etre régulé en vitesse.
<br/><br/>
<h2>III - Telecharger le code: </h2>
Le code est (bien entendu) libre, et disponnible sur github.
<br/><br/>
<a href="https://github.com/Briztou/LowLevel"  download>
    <img src="/layout/img/git.png" style="width:100px;display: block;margin-left: auto;margin-right: auto">
</a>
<br/><br/>
<h2>IV - Documentation complète: </h2>
J'essaie de tenir à jour une documentation sur la théorie de l'algorithme. J'y détaille l'algorithme de mouvement, et les calculs relatifs à la position et la vitesse, ainsi que sa régulation.
<br/>
Il quelques sections manquent encore, mais je le complète régulièrement.
<br/><br/>
<a href="/doc/LowLevel.pdf"  download>
    <img src="/layout/img/download.png" style="width:100px;display: block;margin-left: auto;margin-right: auto">
</a>
<h2>IV - Quelques demonstrations : </h2>
<h3>1 - Deplacements sur plusieurs axes : </h3>
<iframe width="900" height="508"  class = "video"
        src="https://www.youtube.com/embed/B5CdbEAydXg">
</iframe>
<h3>2 - Grandes vitesses : </h3>
<h3>3 - Trajectoires quelconques en 2D : </h3>
<h4>Exemple 3.1 - Ellipses : </h4>
<iframe width="900" height="508" class = "video"
        src="https://www.youtube.com/embed/qO-3WOsGCG8">
</iframe>
<h4>Exemple 3.2 - Courbes de Bezier : </h4>
<iframe width="900" height="508"  class = "video"
        src="https://www.youtube.com/embed/sqgGlTXsr8I">
</iframe>