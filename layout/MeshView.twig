<br/><br/>
<div class = title ><h1>Visualiseur de Maillages</h1></div>
<br/><br/>
Je travaille depuis deux ans sur un projet faisant intervenir de la reconstruction 3D en java. Plus précisément, il est question de construction de maillages à formes précises. J’ai donc besoin d’observer en permanence le résultat des divers algorithmes de reconstruction.
<br/><br/>
Pour ceci, j’ai pendant longtemps utilisé le bon vieux MeshLab, outil surpuissant pour visualiser, éditer, corriger des maillages. Mais, aussi puissant que MeshLab puisse être, l’ouvrir en permanence pour y drag le fichier 3D issu de mon programme était quand même relativement peu optimal.
<br/><br/>
J’ai donc entrepris de concevoir un petit outil de visualisation de maillages sur java, basé sur javaSwing.
<br/><br/>
<img src="/layout/img/MESHVIEW_0.JPG" class="large_picture">
<br/><br/>
L'interface est minimaliste, seule la manipulation est prévue. Ci-dessus, le rendu pour une pièce conçue sous SolidWorks, constituée d'un engrenage soudé à une partie fixe.
<br/><br/>
<br/><br/>
<h2>I) Maillage ?</h2>
<br/><br/>
Un maillage est une manière de représenter des formes en 3D. Il est constitué la plupart du temps (tout le temps en ce qui concerne mon utilisation) de points, et de faces, des suites de points.
<br/><br/>
<a href="https://en.wikipedia.org/wiki/Wavefront_.obj_file">
    <img src="/layout/img/wiki.jpg" style="width:200px;display: block;margin-left: auto;margin-right: auto;border-style: solid;border-color: #4DA3CC;border-radius:10px;">
</a>
<br/><br/>
Un article wiki valant mieux qu’un long discours, vous trouverez ci-dessus le lien vers une description détaillée du format OBJ, le format de maillage que je manipule.
<br/><br/>
<br/><br/>
<img src="/layout/img/MESHVIEW_1.JPG" class="large_picture">
<br/><br/>
Un autre exemple avec une clé à vague, type de clé souvent utilisée dans les voitures.
<br/><br/>
<h2>II) Fonctionnalités</h2>
<br/><br/>
Le module inclut les fonctionnalités suivantes :
<br/><br/>
Affichage :
<br/>
- Affichage des points
<br/>
- Affichage des lignes entourant les faces : les faces ne pouvant être affichées (voir ci-après), seules leur contour sera affiché
<br/><br/>
Manipulation des maillages :
<br/>
- Translation 3D
<br/>
- Rotation 3D
<br/>
- Zoom – de-zoom
<br/><br/>
Comme vous l’aurez remarqué ci dessus, le programme ne permet pas l’affichage des faces, uniquement leur contour.
<br/><br/>
La raison à cela, est que l’affichage correct des faces nécessité un traitement compliqué sur les faces, il ne faut en effet n’afficher que les faces visibles, et non pas celles cachées. Ce traitement consomme beaucoup de puissance de calcul, et nuit beaucoup à la fluidité de la manipulation 3D du maillage. J’ai donc préféré (par manque de temps et d’envie d’implémenter un algorithme performant) me limiter au contour des faces, ce qui fait bien le travail.
<br/><br/>
<h2>III) Méthode d’affichage</h2>
<br/><br/>
L’affichage du maillage se faisant en 2D (logique), il faut projeter selon un plan. L’idée des manipulations 3D va être de modifier les coordonnées des points du maillage (sans toucher aux faces bien sur!),  par des translations, des rotations, ou des zooms. On va donc projeter sur le plan (O, Ox, Oy), arbitrairement.
<br/><br/>
<h2>IV) Un peu de détails sur les rotations</h2>
<br/><br/>
Pour faire tourner le maillage, l’utilisateur va cliquer sur le bouton de sa souris, et va déplacer le curseur.
<br/><br/>
Il existe (au moins) deux manière de concevoir la rotation avec cette approche :
<br/><br/>
<h3>L’approche MeshLab</h3>
Une fois que le bouton est cliqué, la position du curseur dans le repère de l’écran détermine totalement la position angulaire du maillage. Si le curseur se trouve à la position P, qu’il se déplace, et qu’il revient en P, l’inclinaison du maillage sera la même au début et à la fin.
<br/><br/>
Plus programmatiquement, lorsque l’utilisateur clique sur le bouton, la position du curseur est enregistrée, ainsi que le maillage. Ensuite, lors d’un déplacement du curseur, les différences de position en X et Y déterminent deux angles de rotation, rotations d’axes respectifs Y et -X. Ces deux rotations sont appliquées au maillage de départ.
<br/><br/>
<h3>L’approche SolidWorks</h3>
Lorsque le bouton est cliqué, on entre en mode rotation. À chaque déplacement infinitésimal du curseur, une rotation infinitésimale (d’axe X, Y, ou leur composée selon la direction e déplacement du curseur) est appliquée au maillage ACTUEL. Le maillage « actuel »  suivant est le résultat de l’opération précédente.
<br/><br/>
Cette methode, à l’opposé de la suivante, ne pose pas d’équivalence entre la position du curseur et la position angulaire du maillage, les rotations étant appliquées les unes après les autres.
<br/><br/>
Cette methode possède le grand avantage de pouvoir composer les rotations d’axe X et Y (par rapport à l’écran) pour faire une rotation en Z, chose impossible avec la méthode précédente (les utilisateurs de SolidWorks auront je pense reconnu la méthode bien connue consistant à faire tourner sa souris comme un con (vous en faites pas je le fais aussi….) pour faire tourner sa pièce sur l’axe normal à l’écran. Elle rend donc la manipulation plus aisée, et c’est donc celle qui est implémentée dans le code.
Le code (encore une fois libre), est disponible sur GitHub, et accessible ci-dessous :
<br/><br/>
<h2>IV) Code</h2>
Le code est disponible sur GitHub est accessible ci dessous :
<br/><br/>
<a href="https://github.com/Briztou/MeshView"  download>
    <img src="/layout/img/git.png" style="width:100px;display: block;margin-left: auto;margin-right: auto">
</a>
